<style>
    .container {
        max-width: 90%;
    }
</style>
<style>
    .loading {
        display: none;
        position: fixed;
        top: 40%;
        left: 45%;
        transform: translate(-50%, -50%);
        border: 16px solid #f3f3f3;
        border-radius: 50%;
        border-top: 16px solid #3498db;
        width: 120px;
        height: 120px;
        animation: spin 2s linear infinite;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .navigationButtons {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 25px;
            box-shadow: 0 0 3px rgba(0, 0, 0, 1);
            position: fixed;
            top: 48%;
            bottom: 48%;
            text-decoration: none;
            color: black;
            background-color: white;

            @media print {
                display: none;
            }
        }

        .navigationButtons:hover {
            opacity: 0.8;
            cursor: pointer;
        }

        #previousButton {
            left: 0px;

        }

        #nextButton {
            right: 0px;
            rotate: 180deg;
        }
</style>
<div id="loadingCircle" class="loading" style="z-index: 10000;"></div>
<% layout('/layouts/boilerplate') %>
<% const seg=program.seg %>

    <a href="/plant/<%= currentPlant._id %>/seg/<%= seg._id %>/aosr/<%= program._id %>" id="previousButton"
    class="border border-0 border-start-0 border navigationButtons">
        ←
    </a>
    <a href="/plant/<%= currentPlant._id %>/seg/<%= seg._id %>/conclusion/<%= program._id %>" id="nextButton"
    class="border border-0 border-start-0 border navigationButtons">
        ←
    </a>

<a id="backToSegButton" class="btn btn-primary"
            href="/plant/<%= currentPlant._id %>/seg/<%= seg.segInstruction._id %>">
            Back to <%=seg.segInstruction.segInstructionID %>
</a>

<div class="row px-auto">
    <div class="col mb-3">
        <form id="putForm"
            action="/plant/<%= currentPlant._id %>/seg/<%= seg.segInstruction._id %>/supportingData/<%= program._id %>?_method=PUT"
            method="post" enctype="multipart/form-data">
            <div class="my-3">
                <h1 class="fs-3 d-inline">
                    <%=seg.segInstruction.segInstructionID %>, <%=program.name %>, Supporting Data
                </h1>
                <div class="mx-2 d-inline">
                    <button id="saveSupportingDataButton" type="button" onclick="updateData()" class="btn btn-success me-1">Save</button>
                    <div class="d-inline" id="savingIcon">Saved</div>
                </div>
            </div>
            <div id="supportingData-<%= program._id %>">
                <textarea class="form-control"
                name="supportingData"><%= program.supportingData[0] !== '' ? program.supportingData[0] : '' %></textarea>
            </div>
            
        </form>

        <div class="row">
            <div class="mt-5 col-12 col-lg-5">
                <input id="fileInput" name="fileInput" type="file" accept=".pdf" class="form-control mb-2"
                    multiple>
            </div>
        
            <div id="filesSection" class="col-12 col-lg-7 ">
                <% if (program.supportingDataFiles.length) { %>
                <form class="mt-5" id="deleteFileForm"
                    action="/plant/<%= currentPlant._id %>/seg/<%= seg.segInstruction._id %>/supportingData/<%= program._id %>?_method=DELETE"
                    method="post">
                    <ul id="fileListContainer" class="list-group">
                        <% if (currentUser.admin) { %>
                        <li id="deleteHeader" class="list-group-item d-flex align-items-center justify-content-between px-3">
                            <div class="py-2">
                                <input class="border" type="checkbox" id="selectAllCheck">
                            </div>
                            <button disabled type="submit" form="deleteFileForm" class="btn btn-danger"
                            id="deleteFilesButton">
                                Delete
                            </button>
                        </li>
                        <% } %>
                        <% program.supportingDataFiles.forEach((file, i)=> { %>
                        <li class="list-group-item d-flex justify-content-between">
                            <div class="d-flex pt-2">
                                <% if (currentUser.admin) { %>
                                <div class="">
                                    <input id="file<%=i%>" name="deletedFiles[]"
                                    value="<%=file._id%>" type="checkbox"
                                    class="form-check mb-2 deleteCheck">
                                </div>
                                <label class="form-label px-3 text-wrap" for="file<%=i%>">
                                    <%= file.originalName %>
                                </label>
                                <% } else { %>
                                <div class="">
                                    <%= file.originalName %>
                                </div>
                                <% } %>
                            </div>
                            <div class="row ps-3">
                                <div class="col pe-5 py-2">
                                    <% const date = file.uploadDate.toISOString().split('T')[0]%>
                                    <b>Upload Date:</b> <%= date.substring(5,7) %>/<%= date.substring(8,10) %>/<%= date.substring(0,4) %>
                                </div>
                                <div class="col-3 d-flex my-auto justify-content-end">
                                    <div class="">
                                        <button type="button" class="btn btn-primary"
                                            onclick="showPDF('<%=file.location%>')">View
                                        </button>
                                    </div>
                                    <!-- <div class="col">
                                        <a href="<%#=file.location%>"
                                        download="<%#=file.originalName%>"
                                        class="btn btn-secondary mb-1">
                                            Open
                                        </a>
                                    </div> -->
                                </div>
                            </div>
                        </li>
                        <% }) %>
                    </ul>
                </form>
                <% } %>
            </div>
        </div>
    </div>
    <div id="pdfSection" class="col-xl-6" style="position: relative; display: none;">
        <div class="text-end mb-2">
            <button class="btn btn-secondary" onclick="closePDF()">Close</button>
        </div>
        <div class="text-center">
            <embed id="pdfWindow" class="rounded d-inline" type="application/pdf"
                style="width: 100%; height: 1000px;" onload="hideLoading()" />
        </div>
        <div class="loading" id="loading"
            style="display: block; position: absolute; top: 50%; left: 45%; transform: translate(-50%, -50%); z-index: 1000;">
        </div>
    </div>

</div>




        <!-- NicEdit -->
        <script src="/js/nicEdit.js" type="text/javascript"></script>
        <script type="text/javascript">bkLib.onDomLoaded(nicEditors.allTextAreas);</script>
        <script>
            const socket = io();
            let updateData;
            document.addEventListener('DOMContentLoaded', () => {
                setDeleteChecks();
                const savingIcon = document.querySelector('#savingIcon');
                const editors = document.querySelectorAll('div.nicEdit-main').forEach((element, i) => {
                    element.setAttribute('style', 'width: 100%'); // Add width property
                    element.setAttribute('style', 'min-height: 300px;'); // Add height property

                    element.addEventListener('input', (e) => {
                        socket.emit('supportingDataUpdate', { programID: '<%=program._id%>', text: element.innerHTML });
                    });

                    socket.on('supportingDataUpdate', (data) => {
                        if (element.parentElement.parentElement.id === `supportingData-${data.programID}`) {
                            if (savingIcon.innerHTML !== 'EDITING...') {
                            savingIcon.innerHTML = 'EDITING...'
                            }
                            if (!document.activeElement.classList.contains('nicEdit-main')) {
                                element.innerHTML = data.text;
                                element.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';
                                element.classList.add('disabled')
                            }
                        }
                    });
                });

                const nicEditElement = document.querySelector('.nicEdit-main');
                let oldText = nicEditElement.innerHTML;

                updateData = async () => {
                    if (oldText !== nicEditElement.innerHTML) {
                        oldText = nicEditElement.innerHTML;
                        const data = { supportingData: nicEditElement.innerHTML };
                        try {
                            const response = await axios.put('/plant/<%=currentPlant._id%>/seg/<%=seg.segInstruction._id%>/supportingData/<%=program._id%>', data);
                            
                        } catch (error) {
                            console.error('There was an error making the request:', error);
                        }
                    }
                    if (savingIcon.innerHTML !== 'Saved') {
                            savingIcon.innerHTML = 'Saved'
                            nicEditElement.style.backgroundColor = ''
                    }

                    const fileInput = document.querySelector('input[type="file"]');
                    if (fileInput.files.length > 0) {
                        const formData = new FormData();                     
                        // Append each file individually
                        for (let i = 0; i < fileInput.files.length; i++) {
                            formData.append('fileInput', fileInput.files[i]);
                        }
                        fileInput.value = '';

                        formData.append('supportingData', nicEditElement.innerHTML);
  
                        
                        try {
                            const response = await axios.put('/plant/<%=currentPlant._id%>/seg/<%=seg.segInstruction._id%>/supportingData/<%=program._id%>', formData, {
                                headers: {
                                    'Content-Type': 'multipart/form-data'
                                }
                            });
                            appendFile(response.data.program.supportingDataFiles, response.data.admin);
                            
                        } catch (error) {
                            console.error('There was an error making the request:', error);
                        }
                        
                    }
                };

                setInterval(updateData, 10000);
            });

            window.addEventListener('beforeunload', (e) => {
                    updateData()
                })


            function setDeleteChecks() {
                const deleteCheckboxes = document.querySelectorAll('.deleteCheck');
                let selectAllCheck = document.getElementById('selectAllCheck');
                const deleteFilesButton = document.getElementById('deleteFilesButton');

                deleteCheckboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        if (deleteCheckboxes.length === document.querySelectorAll('.deleteCheck:checked').length) {
                            selectAllCheck.checked = true;
                        } else {
                            selectAllCheck.checked = false;
                        }
                        if (document.querySelectorAll('.deleteCheck:checked').length > 0) {
                            deleteFilesButton.disabled = false;
                        } else {
                            deleteFilesButton.disabled = true;
                        }
                    });
                });

                if (selectAllCheck) {
                    selectAllCheck.addEventListener('change', () => {
                        if (selectAllCheck.checked) {
                            deleteCheckboxes.forEach(checkbox => {
                                checkbox.checked = true;
                            });
                            deleteFilesButton.disabled = false;
                        } else {
                            deleteCheckboxes.forEach(checkbox => {
                                checkbox.checked = false;
                            });
                            deleteFilesButton.disabled = true;
                        }
                    });
                }
            }

            function closePDF() {
                document.getElementById('pdfWindow').src = '';
                document.getElementById('pdfSection').style.display = 'none';
            }

            function showPDF(location) {
                document.getElementById('pdfWindow').src = location;
                document.getElementById('pdfSection').style.display = 'block';
            }

            function fileInputSubmit() {
                document.querySelector('#saveSupportingDataButton').click();
            }

            document.querySelector('#fileInput').onchange = fileInputSubmit;

            function hideLoading() {
                document.getElementById('loading').style.display = 'none';
            }

            function appendFile(files, admin) {
                let fileListContainer = document.querySelector('#fileListContainer');
                if (!fileListContainer) {
                    fileListContainer = document.createElement('ul');
                    fileListContainer.classList.add('list-group')
                    fileListContainer.id = "fileListContainer";

                    const deleteForm = document.createElement('form');
                    deleteForm.classList.add('mt-5');
                    deleteForm.id = "deleteFileForm";
                    deleteForm.action = '/plant/<%= currentPlant._id %>/seg/<%= seg.segInstruction._id %>/supportingData/<%= program._id %>?_method=DELETE';
                    deleteForm.method="POST";
                    deleteForm.appendChild(fileListContainer)
                    document.querySelector('#filesSection').appendChild(deleteForm);
                }
                if (admin) {
                    let deleteHeader = document.querySelector('#deleteHeader');
                    if (!deleteHeader) {
                        deleteHeader = document.createElement('li');
                        deleteHeader.classList.add('list-group-item', 'd-flex', 'align-items-center', 'justify-content-between', 'px-3')
                        deleteHeader.id = "deleteHeader"
                        deleteHeader.innerHTML = `
                        <div class="py-2">
                            <input class="border" type="checkbox" id="selectAllCheck">
                        </div>
                        <button disabled type="submit" form="deleteFileForm" class="btn btn-danger"
                        id="deleteFilesButton">
                            Delete
                        </button>`
                    }
                    fileListContainer.innerHTML = `<li id="deleteHeader" class="list-group-item d-flex align-items-center justify-content-between px-3">
                                        <div class="py-2">
                                            <input class="border" type="checkbox" id="selectAllCheck">
                                        </div>
                                        <button disabled type="submit" form="deleteFileForm" class="btn btn-danger"
                                            id="deleteFilesButton">
                                            Delete
                                        </button>
                                    </li>
                    `
                }
                for (const file of files) {
                    const addedFile = document.createElement('li');
                    addedFile.classList.add('list-group-item', 'd-flex', 'justify-content-between');
                    
                    if (admin) {
                        addedFile.innerHTML = `
                        <div class="d-flex pt-2">
                            <div class="">
                                <input id="file${file._id}" name="deletedFiles[]"
                                    value="${file._id}" type="checkbox"
                                    class="form-check mb-2 deleteCheck">
                            </div>
                            <label class="form-label px-3 text-wrap" for="file${file._id}">
                            ${file.originalName}
                        </label>
                        </div>    
                        `;
                    } else {
                        addedFile.innerHTML = `
                        <div class="d-flex pt-2">
                            <div class="">
                                    ${file.originalName}
                            </div>
                        </div>
                        `;
                    }
                    const date = file.uploadDate.split('T')[0];
                    addedFile.innerHTML += `
                        <div class="row ps-3">
                                <div class="col pe-5 py-2">
                                    <b>Upload Date:</b> ${date.substring(5,7)}/${date.substring(8,10)}/${date.substring(0,4)}
                                </div>
                                <div class="col-3 d-flex my-auto justify-content-end">
                                    <div class="">
                                        <button type="button" class="btn btn-primary"
                                            onclick="showPDF('${file.location}')">View
                                        </button>
                                    </div>
                                </div>
                            </div>`;
                    fileListContainer.appendChild(addedFile);
                }
                setDeleteChecks();
            }

            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft' && document.querySelector('#previousButton')) {
                    document.querySelector('#previousButton').click();
                } else if (e.key === 'ArrowRight' && document.querySelector('#nextButton')) {
                    document.querySelector('#nextButton').click();
                }
            })


                
        </script>